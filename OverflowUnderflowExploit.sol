/// @dev In this example, a user can deposit funds into the 
/// @dev contract and withdraw a specified amount. The problem 
/// @dev with this implementation is that the balance variable 
/// @dev is declared as an uint256, which has a maximum value 
/// @dev of 2^256 - 1. If a user tries to withdraw more than 
/// @dev the current balance, the balance will underflow to 
/// @dev a large value and the user will receive more funds 
/// @dev than they should.

/// @dev An attacker could exploit this vulnerability by calling 
/// @dev the withdraw function with a large enough amount to 
/// @dev cause an underflow. The attacker could then repeatedly 
/// @dev call the withdraw function to drain all the 
/// @dev funds from the contract.

contract OverflowUnderflowExploit {
    uint256 public balance;

    function deposit() public payable {
        balance += msg.value;
    }

    function withdraw(uint256 amount) public {
        if (balance >= amount) {
            balance -= amount;
            msg.sender.transfer(amount);
        }
    }
}

/// @dev use SafeMath
/// @dev use require()